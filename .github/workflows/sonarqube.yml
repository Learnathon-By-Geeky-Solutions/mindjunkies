name: SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install pipenv
        run: |
          pip install pipenv

      - name: Install dependencies
        run: |
          pipenv install --dev

      - name: Create .env file
        run: |
          touch .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
          
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
          
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          
          echo "JITSI_APP_ID=${{ secrets.JITSI_APP_ID }}" >> .env
          echo "JITSI_SECRET=${{ secrets.JITSI_SECRET }}" >> .env
          
          echo "CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }}" >> .env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
          
          echo "TEST_PASS=${{ secrets.TEST_PASS }}" >> .env
          echo "NPM_BIN_PATH=${{ secrets.NPM_BIN_PATH }}" >> .env
        shell: bash

      - name: Run Tests and Generate Coverage Report
        env:
          DJANGO_SETTINGS_MODULE: project.settings
        run: |
          pipenv run coverage run manage.py test --keepdb
          pipenv run coverage xml -o coverage.xml
          ls -l coverage.xml  # Check if coverage.xml exists

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
