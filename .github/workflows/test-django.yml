name: Django CI & Postgres Test

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches: [ test-deployment-do, deployment-digitalocean ]
  pull_request:
    branches: [ test-deployment-do, deployment-digitalocean ]

jobs:
  django_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    env:
      DJANGO_SECRET_KEY: test-key-not-good-maybe-make-one-better
      POSTGRES_DB: dockerdb
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_USER: myuser
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      DB_IGNORE_SSL: "true"

    services:
      postgres_main:
        image: postgres:17
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.11, 3.12, 3.13 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv
      - name: Install Dependencies
        run: |
          uv sync --all-groups
      - name: Create .env file
        run: |
          touch .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env

          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >>   .env
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env

          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env

          echo "JITSI_APP_ID=${{ secrets.JITSI_APP_ID }}" >> .env
          echo "JITSI_SECRET=${{ secrets.JITSI_SECRET }}" >> .env

          echo "CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }}" >> .env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env

          echo "TEST_PASS=${{ secrets.TEST_PASS }}" >> .env
          echo "NPM_BIN_PATH=${{ secrets.NPM_BIN_PATH }}" >> .env
        shell: bash
      - name: Run Tests
        run: |
          uv run pytest -n auto --reuse-db